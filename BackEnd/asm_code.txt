
;#=========Function========#
jmp rec_fact_end:;
rec_fact:
;#=======Input=Action======#
push rbp
push rsp
pop rbp
;#=======End=Action========#

;#=========Init=Args=======#
pop [rbp+0]; // 'n' init
push rsp;
push 1;
pop rsp; stack_ptr++
;#========End=Init=========#

;#========Func=Body========#
;#=============If==========#
jmp if_check_0:
if_start_0:
;#========#If_body#=========#
;#========Var=Return=======#
push 1;
pop rax
;#========End=Return=======#
;#========#End_body#========#
jmp if_end_0:
else_start_0:
;#=======#Else_body#========#
;#========#End_body#========#
jmp if_end_0:
if_check_0:

push 1;
push [0]; // access to 'n'
eq;
;#========Condition========#
push 0
je else_start_0:
jmp if_start_0:
;#======End=Condition=======#
if_end_0:
;#=========End=IF=========#
;#========Var=Return=======#
push 1;
push [0]; // access to 'n'
sub;
call rec_fact:
push rax; push return value
push [0]; // access to 'n'
mult;
pop rax
;#========End=Return=======#
;#========End=Body=========#
