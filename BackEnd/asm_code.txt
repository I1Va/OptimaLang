push 0;
; // 'n' init, loc_addr: 0
push rsp;
push 1;
add;
pop rsp; stack_ptr++
;#====Init_Var=Assinment===#
pop [0]; // 'n' assinment
;#======End=Assinment======#
push 1;
; // 'ans' init, loc_addr: 1
push rsp;
push 1;
add;
pop rsp; stack_ptr++
;#====Init_Var=Assinment===#
pop [1]; // 'ans' assinment
;#======End=Assinment======#
push 1;
; // 'cur' init, loc_addr: 2
push rsp;
push 1;
add;
pop rsp; stack_ptr++
;#====Init_Var=Assinment===#
pop [2]; // 'cur' assinment
;#======End=Assinment======#

;#=========Function========#
jmp factorial_end:;
factorial:
;#=======Input=Action======#
push rbp
push rsp
pop rbp
;#=======End=Action========#

;#=========Init=Args=======#
;#========End=Init=========#

;#========Func=Body========#
;#===========While=========#
jmp while_check_0:
while_start_0:

push [2]; // access to 'cur'
push [1]; // access to 'ans'
mult;
pop [1]; // 'ans' assinment
push 1;
push [2]; // access to 'cur'
add;
pop [2]; // 'cur' assinment

while_check_0:

push [0]; // access to 'n'
push [2]; // access to 'cur'
less;
;#========Condition========#

push 0
jne while_start_0:

while_end_0:
;#=======End=While========#
;#========Var=Return=======#
push [1]; // access to 'ans'
pop rax
;#========End=Return=======#
;#========End=Body=========#

;#=======Leave=Action======#
push rbp;
pop rsp; stack_pointer = frame_pointer
pop  rbp;
ret;
factorial_end:;
;#=======End=Function======#

;#=========Function========#
jmp main_end:;
main:
;#=======Input=Action======#
push rbp
push rsp
pop rbp
;#=======End=Action========#

;#=========Init=Args=======#
;#========End=Init=========#

;#========Func=Body========#
in; call input
pop [0]; // 'n' assinment
call factorial:
push rax; push return value
;call print
    out;
    push 10;
    outc;
;#========Var=Return=======#
push 0;
pop rax
;#========End=Return=======#
;#========End=Body=========#

;#=======Leave=Action======#
push rbp;
pop rsp; stack_pointer = frame_pointer
pop  rbp;
ret;
main_end:;
;#=======End=Function======#
call main:
hlt;
